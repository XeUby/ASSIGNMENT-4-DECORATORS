// Milk Condiment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DecoratorAssignment.CondimentsList
{
    // Milk class, a concrete condiment decorator
    public class Milk : CondimentsDecorator
    {
        // Reference to the wrapped beverage
        Beverage beverage;

        // Constructor takes a beverage to decorate
        public Milk(Beverage beverage)
        {
            this.beverage = beverage;
        }

        // Override the Cost method to add the cost of Milk to the wrapped beverage's cost
        public override decimal Cost()
        {
            return 0.30M + beverage.Cost();
        }

        // Override the GetDescription method to add "Milk" to the wrapped beverage's description
        public override string GetDescription()
        {
            return beverage.GetDescription() + ", Milk";
        }
    }
}

// Mocha Condiment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DecoratorAssignment.CondimentsList
{
    // Mocha class, a concrete condiment decorator
    public class Mocha : CondimentsDecorator
    {
        // Reference to the wrapped beverage
        Beverage beverage;

        // Constructor takes a beverage to decorate
        public Mocha(Beverage beverage)
        {
            this.beverage = beverage;
        }

        // Override the Cost method to add the cost of Mocha to the wrapped beverage's cost
        public override decimal Cost()
        {
            return 0.20M + beverage.Cost();
        }

        // Override the GetDescription method to add "Mocha" to the wrapped beverage's description
        public override string GetDescription()
        {
            return beverage.GetDescription() + ", Mocha";
        }
    }
}

// Soy Condiment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DecoratorAssignment.CondimentsList
{
    // Soy class, a concrete condiment decorator
    public class Soy : CondimentsDecorator
    {
        // Reference to the wrapped beverage
        Beverage beverage;

        // Constructor takes a beverage to decorate
        public Soy(Beverage beverage)
        {
            this.beverage = beverage;
        }

        // Override the Cost method to add the cost of Soy to the wrapped beverage's cost
        public override decimal Cost()
        {
            return 0.15M + beverage.Cost();
        }

        // Override the GetDescription method to add "Soy" to the wrapped beverage's description
        public override string GetDescription()
        {
            return beverage.GetDescription() + ", Soy";
        }
    }
}

// Whip Condiment
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DecoratorAssignment.CondimentsList
{
    // Whip class, a concrete condiment decorator
    public class Whip : CondimentsDecorator
    {
        // Reference to the wrapped beverage
        Beverage beverage;

        // Constructor takes a beverage to decorate
        public Whip(Beverage beverage)
        {
            this.beverage = beverage;
        }

        // Override the Cost method to add the cost of Whip to the wrapped beverage's cost
        public override decimal Cost()
        {
            return 0.10M + beverage.Cost();
        }

        // Override the GetDescription method to add "Whip" to the wrapped beverage's description
        public override string GetDescription()
        {
            return beverage.GetDescription() + ", Whip";
        }
    }
}
